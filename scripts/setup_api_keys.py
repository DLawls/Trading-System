#!/usr/bin/env python3
"""
API Keys Setup Script for D-Laws Trading System

This script helps you set up your API keys for Alpaca and News API.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with API keys"""
    
    print("🔑 D-Laws Trading System API Setup")
    print("=" * 50)
    print()
    
    # Get project root directory
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    if env_file.exists():
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("Please enter your API keys:")
    print("(You can get Alpaca keys from: https://app.alpaca.markets/account/keys)")
    print("(You can get News API key from: https://newsapi.org/register)")
    print()
    
    # Get API keys from user
    alpaca_key = input("Enter your Alpaca API Key: ").strip()
    alpaca_secret = input("Enter your Alpaca API Secret: ").strip()
    news_key = input("Enter your News API Key: ").strip()
    
    if not all([alpaca_key, alpaca_secret, news_key]):
        print("❌ All API keys are required. Setup cancelled.")
        return
    
    # Create .env content
    env_content = f"""# D-Laws Trading System Environment Variables
# Generated by setup script

# Alpaca API Configuration
ALPACA_API_KEY={alpaca_key}
ALPACA_API_SECRET={alpaca_secret}

# News API Configuration  
NEWS_API_KEY={news_key}

# Environment Settings
ENVIRONMENT=development
LOG_LEVEL=INFO

# Database URLs (for future use)
REDIS_URL=redis://localhost:6379
POSTGRES_URL=postgresql://localhost:5432/trading_system
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print()
        print("✅ .env file created successfully!")
        print(f"📁 Location: {env_file}")
        print()
        print("🚀 Your trading system is now configured with API keys.")
        print("   You can now run real data ingestion tests.")
        print()
        print("Next steps:")
        print("  1. Run: python src/test_real_data_ingestion.py")
        print("  2. Or continue with development phases")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {str(e)}")

def verify_env_file():
    """Verify that .env file exists and has required keys"""
    
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    if not env_file.exists():
        print("❌ .env file not found. Please run setup first.")
        return False
    
    required_keys = ['ALPACA_API_KEY', 'ALPACA_API_SECRET', 'NEWS_API_KEY']
    missing_keys = []
    
    try:
        with open(env_file, 'r') as f:
            content = f.read()
            
        for key in required_keys:
            if f"{key}=" not in content or f"{key}=your_" in content:
                missing_keys.append(key)
        
        if missing_keys:
            print(f"❌ Missing or placeholder API keys: {', '.join(missing_keys)}")
            return False
        
        print("✅ .env file is properly configured!")
        return True
        
    except Exception as e:
        print(f"❌ Error reading .env file: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "verify":
        verify_env_file()
    else:
        create_env_file() 